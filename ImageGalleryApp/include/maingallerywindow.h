/**
 * @file maingallerywindow.h
 * @brief Declaration of the MainGalleryWindow class, which represents the main application window
 * for the image gallery.
 *
 * This file defines the MainGalleryWindow class, responsible for displaying images,
 * handling user interaction for navigation (previous/next image), and integrating
 * with ImageLoader and UINavigator components. It utilizes Qt's GUI and Widgets
 * modules to build the user interface.
 */
#ifndef IMAGEGALLERYAPP_MAINGALLERYWINDOW_H
#define IMAGEGALLERYAPP_MAINGALLERYWINDOW_H

#include <QMainWindow>    // Base class for the main window
#include <QImage>         // To display images
#include <QScopedPointer> // For managing Qt objects lifecycle

// Forward declarations to avoid circular dependencies and speed up compilation
// These classes are external components integrated into the MainGalleryWindow.
class ImageLoader;   ///< Forward declaration for ImageLoader class.
class UINavigator;   ///< Forward declaration for UINavigator class.


/**
 * @brief Namespace for the UI generated by Qt Designer.
 *
 * This namespace is automatically generated by Qt's User Interface Compiler (uic)
 * from the .ui file. It should not be manually removed or modified.
 */
namespace Ui {
class MainGalleryWindow; ///< This class is generated by uic from the .ui file.
}

/**
 * @brief The MainGalleryWindow class manages the main user interface for the image gallery.
 *
 * This class inherits from QMainWindow and is responsible for:
 * - Displaying images loaded by the ImageLoader.
 * - Handling navigation actions (previous/next) via the UINavigator.
 * - Updating the UI based on image loading events and navigation changes.
 * - Setting up initial UI elements and managing their lifetime.
 */
class MainGalleryWindow : public QMainWindow {
    Q_OBJECT ///< Required for QObject-derived classes to use Qt's meta-object system (signals/slots, properties).

public:
    /**
     * @brief Constructor for MainGalleryWindow.
     *
     * Initializes the main gallery window, setting up its dependencies
     * on an ImageLoader and a UINavigator instance.
     *
     * @param loader Pointer to the ImageLoader instance responsible for loading images.
     * @param navigator Pointer to the UINavigator instance responsible for image ID management.
     * @param parent Pointer to the parent QObject, typically nullptr for the main window.
     */
    explicit MainGalleryWindow(ImageLoader* loader,
                               UINavigator* navigator,
                               QWidget* parent = nullptr);

    /**
     * @brief Destructor for MainGalleryWindow.
     *
     * Cleans up resources allocated by the window.
     */
    ~MainGalleryWindow();

private slots:
    /**
     * @brief Slot to receive loaded images from ImageLoader.
     *
     * This slot is connected to the ImageLoader::imageLoaded signal.
     * It updates the displayed image when a new image is successfully loaded.
     *
     * @param id The ID of the loaded image.
     * @param image The loaded QImage data.
     */
    void onImageLoaded(int id, const QImage& image);

    /**
     * @brief Slot to handle image loading errors.
     *
     * This slot is connected to the ImageLoader::loadingError signal.
     * It displays an error message if an image fails to load.
     *
     * @param id The ID of the image that failed to load.
     * @param errorMessage A string describing the error.
     */
    void onLoadingError(int id, const QString& errorMessage);

    /**
     * @brief Slot to react to image ID changes from UINavigator.
     *
     * This slot is connected to the UINavigator::imageIdChanged signal.
     * It triggers the loading of the new image and updates UI elements
     * related to the current image ID.
     *
     * @param newId The new current image ID.
     */
    void onImageIdChanged(int newId);

    /**
     * @brief Slot for the "Previous" button click.
     *
     * This slot is connected to the clicked() signal of the previous button.
     * It requests the UINavigator to move to the previous image.
     */
    void on_prevButton_clicked();

    /**
     * @brief Slot for the "Next" button click.
     *
     * This slot is connected to the clicked() signal of the next button.
     * It requests the UINavigator to move to the next image.
     */
    void on_nextButton_clicked();

private:
    /**
     * @brief Updates the image displayed in the UI.
     *
     * Scales the provided image to fit the display area and sets it on the image label.
     *
     * @param image The QImage to be displayed.
     */
    void updateImageDisplay(const QImage& image);

    /**
     * @brief Updates the enabled/disabled state of navigation buttons.
     *
     * Based on the current image ID and the maximum image ID, this method
     * enables or disables the "Previous" and "Next" buttons appropriately.
     *
     * @param currentId The current image ID being displayed.
     * @param maxId The maximum available image ID.
     */
    void updateNavigationButtons(int currentId, int maxId);

    /**
     * @brief Updates the label showing the current image ID and total count.
     *
     * Formats and sets the text for the image ID display label.
     *
     * @param currentId The current image ID.
     * @param maxId The maximum available image ID.
     */
    void updateIdLabel(int currentId, int maxId);

    /**
     * @brief Sets up icons for the navigation buttons.
     *
     * This method is responsible for creating and assigning appropriate icons
     * (e.g., triangular arrows) to the "Previous" and "Next" buttons.
     */
    void setupUiIcons();

    QScopedPointer<Ui::MainGalleryWindow> ui; ///< Manages the UI elements generated from the .ui file.
    ImageLoader* m_imageLoader;               ///< Pointer to the ImageLoader instance.
    UINavigator* m_uiNavigator;               ///< Pointer to the UINavigator instance.

    int m_maxImageId; ///< Stores the maximum image ID available in the gallery.
};

#endif // IMAGEGALLERYAPP_MAINGALLERYWINDOW_H
